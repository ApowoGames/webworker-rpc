syntax = "proto2";
import "def.proto";
package webworker_rpc;

enum MSG_ERR {
    OK              = 0;
    // TODO
}

message Executor{
    required string method = 1;// 已注册的执行程序(每个worker都维护一个Registry来注册Executor)
    optional string context = 2;// executor执行所在的上下文，结合注册表获取对象，如不设置默认工作在Global
    repeated Param params = 3;// 方法入参描述，用&分割，可以带值传送。例如"x=1&y=2"
}

message Param {
    required ParamType t = 1;
    oneof val {
        string val_str = 2;
        bool val_bool = 3;
        int32 val_num = 4;
        bytes val_bytes = 5;
        Executor val_executor = 6;
    }
    optional string className = 7;
}

enum ParamType{
    str = 1;
    boolean = 2;
    num = 3;
    unit8array = 4;
    executor = 5;
    custom = 6;
}

message Header {
    required string service_name = 1;// 发送者(worker)名称 
    required Executor remote_executor = 2;// 远程调用
}

message ExecutePacket {
    required int32 id = 1;
    required Header header = 2;
    optional int32 body_len = 3;// 复杂类型支持
    optional bytes body = 4;// 复杂类型支持
}

message ResponsePacket {
    required int32 id = 1;
    optional Param val = 2;
    optional string err = 3;
}

message AddRegistryPacket {
    required int32 id = 1;
    required string service_name = 2;// 发送者(worker)名称
    repeated Executor executors = 3;// 发送者可调用方法
}

message GotRegistryPacket {
    required int32 id = 1;
    required string service_name = 2;// 发送者(worker)名称
}

message RemoveRegistryPacket {
    required string service_name = 1;// 发送者(worker)名称
    repeated Executor executors = 2;// 发送者可调用方法
}

message UnlinkPacket {
    required string service_name = 1;// 发送者(worker)名称
}

message RequestLinkPacket {
    required string service_name = 1;// 发送者(worker)名称
    required string worker_name = 2;// 目标(worker)名称
    required string worker_url = 3;// 目标(worker)地址
}

message DestroyManagerPacket {
    optional string service_name = 1;// 发送者(worker)名称
}

message LinkPacket {
    repeated string workers = 1;// 待连接(worker)名称
}

message ProxyCreateWorkerPacket {
    required string worker_name = 1;// 目标(worker)名称
    required string worker_url = 2;// 目标(worker)地址
    required WebWorkerMessage msg = 3;// 初始化时响应信息
}

message WebWorkerMessage {
    required string key = 1;
    oneof data {
        LinkPacket data_link = 2;
        RequestLinkPacket data_request_link = 3;
        ProxyCreateWorkerPacket data_proxy_create_worker = 4;
        AddRegistryPacket data_add_registry = 5;
        GotRegistryPacket data_got_registry = 6;
        RemoveRegistryPacket data_remove_registry = 7;
        ExecutePacket data_execute = 8;
        ResponsePacket data_response = 9;
        UnlinkPacket data_unlink = 10;
        DestroyManagerPacket data_destroy_manager = 11;
    }
}
